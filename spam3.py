#!/usr/bin/env python3

import asyncio, aiohttp, json, sys, getpass, os
from datetime import datetime
from pathlib import Path
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError
from colorama import Fore, Style, init
import itertools

init(autoreset=True)

# ===== CONFIG =====
API_ID = 23541688
API_HASH = "c8c5b0b2a0e15badc4133e0d27c7f017"
TARGET_GROUP = "@khugiaitrisss"
SESSION_NAME = "vip_sender_online"
DELAY_SECONDS = 10 * 60  # 10 ph√∫t
PHONE = "+84862367753"
PASSWORD = "Demo@123"
KEY_URL = "https://raw.githubusercontent.com/QuaTang382/sms/main/key.txt"
MAINTENANCE_URL = "https://raw.githubusercontent.com/QuaTang382/sms/main/baotri.txt"
# ===================

DATA_DIR = Path.home() / ".vip_bot_online"
DATA_DIR.mkdir(parents=True, exist_ok=True)
LAST_FILE = DATA_DIR / ".last_send.json"


def pretty_time(sec: int):
    m, s = divmod(sec, 60)
    return f"{m:02d}:{s:02d}"


def load_last_send():
    if not LAST_FILE.exists():
        return {}
    try:
        data = json.loads(LAST_FILE.read_text())
        return {k: datetime.fromisoformat(v) for k, v in data.items()}
    except Exception:
        return {}


def save_last_send(data: dict):
    serializable = {k: v.isoformat() for k, v in data.items()}
    LAST_FILE.write_text(json.dumps(serializable, indent=2))


async def check_key_online(user_key: str):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(KEY_URL) as resp:
                if resp.status != 200:
                    print(Fore.RED + "Kh√¥ng th·ªÉ t·∫£i danh s√°ch key online.")
                    return False, "Server l·ªói"
                text = await resp.text()
        for line in text.strip().splitlines():
            if "|" in line:
                key, exp_str = line.strip().split("|", 1)
                if user_key.strip() == key.strip():
                    exp = datetime.fromisoformat(exp_str.strip())
                    if datetime.now() > exp:
                        return False, f"Key h·∫øt h·∫°n ({exp.date()})"
                    return True, f"H·ª£p l·ªá ƒë·∫øn {exp.date()}"
        return False, "Key kh√¥ng t·ªìn t·∫°i"
    except Exception as e:
        return False, f"L·ªói khi ki·ªÉm tra key: {e}"


async def ensure_authorized(client: TelegramClient):
    if await client.is_user_authorized():
        return True
    try:
        await client.send_code_request(PHONE)
    except Exception as e:
        print(Fore.RED + f"G·ª≠i m√£ l·ªói: {e}")
        return False
    code = input(Fore.CYAN + "Nh·∫≠p m√£(ch·ªâ 1 l·∫ßn): ").strip()
    try:
        await client.sign_in(PHONE, code)
    except SessionPasswordNeededError:
        if not PASSWORD:
            print(Fore.RED + "C·∫ßn m·∫≠t kh·∫©u 2FA.")
            return False
        await client.sign_in(password=PASSWORD)
    return await client.is_user_authorized()


async def fancy_loading(text="ƒêang kh·ªüi ƒë·ªông"):
    for c in itertools.cycle(["‚†ã","‚†ô","‚†π","‚†∏","‚†º","‚†¥","‚†¶","‚†ß","‚†á","‚†è"]):
        sys.stdout.write(f"\r{Fore.MAGENTA}{text}... {c}")
        sys.stdout.flush()
        await asyncio.sleep(0.1)


async def countdown(seconds, prefix="ƒê·∫øm ng∆∞·ª£c"):
    while seconds > 0:
        sys.stdout.write(f"\r{Fore.YELLOW}‚è≥ {prefix}: {pretty_time(seconds)}  ")
        sys.stdout.flush()
        await asyncio.sleep(1)
        seconds -= 1
    print(Fore.GREEN + "\nH·∫øt th·ªùi gian ch·ªù!")


async def safe_connect():
    """K·∫øt n·ªëi Telegram, t·ª± x·ª≠ l√Ω l·ªói database is locked"""
    while True:
        try:
            client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
            await client.connect()
            return client
        except Exception as e:
            if "database is locked" in str(e).lower():
                print(Fore.RED + "‚ö†Ô∏è L·ªói database is locked ‚Üí ƒëang xo√° session c≈©...")
                try:
                    os.remove(f"{SESSION_NAME}.session")
                    await asyncio.sleep(1)
                except FileNotFoundError:
                    pass
                continue
            else:
                raise

async def check_maintenance():
    """Ki·ªÉm tra tr·∫°ng th√°i b·∫£o tr√¨ online"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(MAINTENANCE_URL) as resp:
                if resp.status == 200:
                    text = (await resp.text()).strip().lower()
                    if "on" in text:
                        print(Fore.RED + "\nüöß Tool ƒëang b·∫£o tr√¨. Vui l√≤ng quay l·∫°i sau.")
                        return True
    except Exception as e:
        print(Fore.YELLOW + f"L·ªói khi ki·ªÉm tra b·∫£o tr√¨: {e}")
    return False
async def main():
    print(Fore.MAGENTA + Style.BRIGHT + "\n=== SPAM VIP ===\n")
    # Ki·ªÉm tra b·∫£o tr√¨
    if await check_maintenance():
        return

    user_key = getpass.getpass(Fore.YELLOW + "Nh·∫≠p KEY c·ªßa b·∫°n: ").strip()
    ok, msg = await check_key_online(user_key)
    if not ok:
        print(Fore.RED + f"Key kh√¥ng h·ª£p l·ªá: {msg}")
        return
    print(Fore.GREEN + f" Key h·ª£p l·ªá ({msg})")

    spinner = asyncio.create_task(fancy_loading())
    await asyncio.sleep(2)
    spinner.cancel()
    print(Fore.CYAN + "\nƒêang kh·ªüi t·∫°o...")

    client = await safe_connect()
    if not await ensure_authorized(client):
        print(Fore.RED + "L·ªói ƒëƒÉng nh·∫≠p Telegram.")
        await client.disconnect()
        return

    me = await client.get_me()
    print(Fore.GREEN + f"Xin ch√†o!\n")

    last_send = load_last_send()

    phone_to_send = input(Fore.CYAN + "Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i c·∫ßn spam: ").strip()
    if not phone_to_send:
        print(Fore.RED + "Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
        await client.disconnect()
        return

    phone_to_send = phone_to_send.lstrip('+')
    msg = f"/vip {phone_to_send}"

    now = datetime.now()
    if phone_to_send in last_send:
        elapsed = (now - last_send[phone_to_send]).total_seconds()
        if elapsed < DELAY_SECONDS:
            remain = int(DELAY_SECONDS - elapsed)
            print(Fore.RED + f"S·ªë {phone_to_send} ƒëang delay ({pretty_time(remain)} c√≤n l·∫°i).")
            await countdown(remain, prefix=f"S·ªë {phone_to_send}")
        else:
            print(Fore.GREEN + f"S·ªë {phone_to_send} ƒë√£ h·∫øt delay, c√≥ th·ªÉ g·ª≠i.")
    else:
        print(Fore.GREEN + f"S·ªë {phone_to_send} l√† s·ªë kh√°c, ƒë√£ spam.")

    try:
        await client.send_message(TARGET_GROUP, msg)
        print(Fore.GREEN + f"ƒê√£ g·ª≠i spam {phone_to_send}")
        last_send[phone_to_send] = datetime.now()
        save_last_send(last_send)
        print(Fore.YELLOW + f"‚è≥ ƒê√£ l∆∞u delay 10 ph√∫t cho {phone_to_send}")
    except Exception as e:
        print(Fore.RED + f"L·ªói khi g·ª≠i: {e}")

    # üîí ƒê√≥ng client + tho√°t ƒë·ªÉ tr√°nh b·ªã database locked
    await client.disconnect()
    print(Fore.CYAN + "\ntool t·ª± tho√°t ƒë·ªÉ tr√°nh database locked.")
    sys.exit(0)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(Fore.YELLOW + "\nƒê√£ h·ªßy b·ªüi ng∆∞·ªùi d√πng.")

