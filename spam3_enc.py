# Auto-generated Base64-wrapped Python file
# Generated by b64_pack.py
import base64, sys
_data_b64 = 'IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMw0KDQppbXBvcnQgYXN5bmNpbywgYWlvaHR0cCwganNvbiwgc3lzLCBoYXNobGliLCBnZXRwYXNzDQpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQ0KZnJvbSBwYXRobGliIGltcG9ydCBQYXRoDQpmcm9tIHRlbGV0aG9uIGltcG9ydCBUZWxlZ3JhbUNsaWVudA0KZnJvbSB0ZWxldGhvbi5lcnJvcnMgaW1wb3J0IFNlc3Npb25QYXNzd29yZE5lZWRlZEVycm9yDQpmcm9tIGNvbG9yYW1hIGltcG9ydCBGb3JlLCBTdHlsZSwgaW5pdA0KaW1wb3J0IGl0ZXJ0b29scywgdGltZSwgb3MNCg0KaW5pdChhdXRvcmVzZXQ9VHJ1ZSkNCg0KIyA9PT09PSBDT05GSUcgPT09PT0NCkFQSV9JRCA9IDExNjMwNzIyDQpBUElfSEFTSCA9ICIxNzk5MmMzNGZiNzVmNTVhZGNmODg2YjI4OTJmY2U2MCINClRBUkdFVF9HUk9VUCA9ICJAa2h1Z2lhaXRyaXNzcyINClNFU1NJT05fTkFNRSA9ICJ2aXBfc2VuZGVyX29ubGluZSINCkRFTEFZX1NFQ09ORFMgPSAxMCAqIDYwICAjIDEwIHBow7p0DQpQSE9ORSA9ICIrODQ5Mzk2NDIxOTUiDQpQQVNTV09SRCA9ICIiDQpLRVlfVVJMID0gImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9oeVhHNVEzaSIgICMgTGluayBQYXN0ZWJpbiBjaOG7qWEga2V5DQojID09PT09PT09PT09PT09PT09PT0NCg0KREFUQV9ESVIgPSBQYXRoLmhvbWUoKSAvICIudmlwX2JvdF9vbmxpbmUiDQpEQVRBX0RJUi5ta2RpcihwYXJlbnRzPVRydWUsIGV4aXN0X29rPVRydWUpDQpMQVNUX0ZJTEUgPSBEQVRBX0RJUiAvICIubGFzdF9zZW5kIg0KDQpkZWYgcHJldHR5X3RpbWUoc2VjOiBpbnQpOg0KICAgIG0sIHMgPSBkaXZtb2Qoc2VjLCA2MCkNCiAgICByZXR1cm4gZiJ7bTowMmR9OntzOjAyZH0iDQoNCmRlZiBsb2FkX2xhc3Rfc2VuZCgpOg0KICAgIGlmIG5vdCBMQVNUX0ZJTEUuZXhpc3RzKCk6DQogICAgICAgIHJldHVybiBOb25lDQogICAgdHJ5Og0KICAgICAgICBkYXRhID0ganNvbi5sb2FkcyhMQVNUX0ZJTEUucmVhZF90ZXh0KCkpDQogICAgICAgIHRzID0gZGF0YS5nZXQoInRpbWUiKQ0KICAgICAgICByZXR1cm4gZGF0ZXRpbWUuZnJvbWlzb2Zvcm1hdCh0cykgaWYgdHMgZWxzZSBOb25lDQogICAgZXhjZXB0IEV4Y2VwdGlvbjoNCiAgICAgICAgcmV0dXJuIE5vbmUNCg0KZGVmIHNhdmVfbGFzdF9zZW5kKGR0OiBkYXRldGltZSk6DQogICAgTEFTVF9GSUxFLndyaXRlX3RleHQoanNvbi5kdW1wcyh7InRpbWUiOiBkdC5pc29mb3JtYXQoKX0pKQ0KDQphc3luYyBkZWYgY2hlY2tfa2V5X29ubGluZSh1c2VyX2tleTogc3RyKToNCiAgICAiIiJLaeG7g20gdHJhIGtleSBvbmxpbmUgdOG7qyBQYXN0ZWJpbiIiIg0KICAgIHRyeToNCiAgICAgICAgYXN5bmMgd2l0aCBhaW9odHRwLkNsaWVudFNlc3Npb24oKSBhcyBzZXNzaW9uOg0KICAgICAgICAgICAgYXN5bmMgd2l0aCBzZXNzaW9uLmdldChLRVlfVVJMKSBhcyByZXNwOg0KICAgICAgICAgICAgICAgIGlmIHJlc3Auc3RhdHVzICE9IDIwMDoNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAi4pyWIEtow7RuZyB0aOG7gyB04bqjaSBkYW5oIHPDoWNoIGtleSBvbmxpbmUuIikNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlLCAiU2VydmVyIGzhu5dpIg0KICAgICAgICAgICAgICAgIHRleHQgPSBhd2FpdCByZXNwLnRleHQoKQ0KICAgICAgICBsaW5lcyA9IHRleHQuc3RyaXAoKS5zcGxpdGxpbmVzKCkNCiAgICAgICAgZm9yIGxpbmUgaW4gbGluZXM6DQogICAgICAgICAgICBpZiAifCIgaW4gbGluZToNCiAgICAgICAgICAgICAgICBrZXksIGV4cF9zdHIgPSBsaW5lLnN0cmlwKCkuc3BsaXQoInwiLCAxKQ0KICAgICAgICAgICAgICAgIGlmIHVzZXJfa2V5LnN0cmlwKCkgPT0ga2V5LnN0cmlwKCk6DQogICAgICAgICAgICAgICAgICAgIGV4cCA9IGRhdGV0aW1lLmZyb21pc29mb3JtYXQoZXhwX3N0ci5zdHJpcCgpKQ0KICAgICAgICAgICAgICAgICAgICBpZiBkYXRldGltZS5ub3coKSA+IGV4cDoNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZSwgZiJLZXkgaOG6v3QgaOG6oW4gKHtleHAuZGF0ZSgpfSkiDQogICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlLCBmIkjhu6NwIGzhu4cgxJHhur9uIHtleHAuZGF0ZSgpfSINCiAgICAgICAgcmV0dXJuIEZhbHNlLCAiS2V5IGtow7RuZyB04buTbiB04bqhaSINCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgIHJldHVybiBGYWxzZSwgZiJM4buXaSBraGkga2nhu4NtIHRyYSBrZXk6IHtlfSINCg0KYXN5bmMgZGVmIGVuc3VyZV9hdXRob3JpemVkKGNsaWVudDogVGVsZWdyYW1DbGllbnQpOg0KICAgICIiIsSQxINuZyBuaOG6rXAgVGVsZWdyYW0iIiINCiAgICBpZiBhd2FpdCBjbGllbnQuaXNfdXNlcl9hdXRob3JpemVkKCk6DQogICAgICAgIHJldHVybiBUcnVlDQogICAgdHJ5Og0KICAgICAgICBhd2FpdCBjbGllbnQuc2VuZF9jb2RlX3JlcXVlc3QoUEhPTkUpDQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICBwcmludChGb3JlLlJFRCArIGYi4pyWIEfhu61pIG3DoyBs4buXaToge2V9IikNCiAgICAgICAgcmV0dXJuIEZhbHNlDQogICAgY29kZSA9IGlucHV0KEZvcmUuQ1lBTiArICJOaOG6rXAgbcOjIGNvZGUgZG8gYWRtaW4obOG6p24gxJHhuqd1KTogIikuc3RyaXAoKQ0KICAgIHRyeToNCiAgICAgICAgYXdhaXQgY2xpZW50LnNpZ25faW4oUEhPTkUsIGNvZGUpDQogICAgZXhjZXB0IFNlc3Npb25QYXNzd29yZE5lZWRlZEVycm9yOg0KICAgICAgICBpZiBub3QgUEFTU1dPUkQ6DQogICAgICAgICAgICBwcmludChGb3JlLlJFRCArICLinJYgQ+G6p24gbeG6rXQga2jhuql1IDJGQS4iKQ0KICAgICAgICAgICAgcmV0dXJuIEZhbHNlDQogICAgICAgIGF3YWl0IGNsaWVudC5zaWduX2luKHBhc3N3b3JkPVBBU1NXT1JEKQ0KICAgIHJldHVybiBhd2FpdCBjbGllbnQuaXNfdXNlcl9hdXRob3JpemVkKCkNCg0KYXN5bmMgZGVmIGZhbmN5X2xvYWRpbmcodGV4dD0ixJBhbmcga2jhu59pIMSR4buZbmciKToNCiAgICBmb3IgYyBpbiBpdGVydG9vbHMuY3ljbGUoWyLioIsiLCLioJkiLCLioLkiLCLioLgiLCLioLwiLCLioLQiLCLioKYiLCLioKciLCLioIciLCLioI8iXSk6DQogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZiJccntGb3JlLk1BR0VOVEF9e3RleHR9Li4uIHtjfSIpDQogICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICBhd2FpdCBhc3luY2lvLnNsZWVwKDAuMSkNCg0KYXN5bmMgZGVmIGNvdW50ZG93bihzZWNvbmRzKToNCiAgICB3aGlsZSBzZWNvbmRzOg0KICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGYiXHJ7Rm9yZS5ZRUxMT1d94o+zIMSQ4bq/bSBuZ8aw4bujYzoge3ByZXR0eV90aW1lKHNlY29uZHMpfSAgIikNCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgIGF3YWl0IGFzeW5jaW8uc2xlZXAoMSkNCiAgICAgICAgc2Vjb25kcyAtPSAxDQogICAgcHJpbnQoRm9yZS5HUkVFTiArICJcbuKchSBI4bq/dCB0aOG7nWkgZ2lhbiBjaOG7nSwgY8OzIHRo4buDIFNQQU0gdGnhur9wISIpDQoNCmFzeW5jIGRlZiBtYWluKCk6DQogICAgcHJpbnQoRm9yZS5NQUdFTlRBICsgU3R5bGUuQlJJR0hUICsgIlxuPT09IFNQQU0gVklQID09PVxuIikNCg0KICAgIHVzZXJfa2V5ID0gZ2V0cGFzcy5nZXRwYXNzKEZvcmUuWUVMTE9XICsgIk5o4bqtcCBLRVkgY+G7p2EgYuG6oW46ICIpLnN0cmlwKCkNCiAgICBvaywgbXNnID0gYXdhaXQgY2hlY2tfa2V5X29ubGluZSh1c2VyX2tleSkNCiAgICBpZiBub3Qgb2s6DQogICAgICAgIHByaW50KEZvcmUuUkVEICsgZiLinJYgS2V5IGtow7RuZyBo4bujcCBs4buHOiB7bXNnfSIpDQogICAgICAgIHJldHVybg0KICAgIHByaW50KEZvcmUuR1JFRU4gKyBmIuKclCBLZXkgaOG7o3AgbOG7hyAoe21zZ30pIikNCg0KICAgIHNwaW5uZXIgPSBhc3luY2lvLmNyZWF0ZV90YXNrKGZhbmN5X2xvYWRpbmcoKSkNCiAgICBhd2FpdCBhc3luY2lvLnNsZWVwKDMpDQogICAgc3Bpbm5lci5jYW5jZWwoKQ0KICAgIHByaW50KEZvcmUuQ1lBTiArICJcbvCflJdMb2FkaW5nIikNCg0KICAgIGNsaWVudCA9IFRlbGVncmFtQ2xpZW50KFNFU1NJT05fTkFNRSwgQVBJX0lELCBBUElfSEFTSCkNCiAgICBhd2FpdCBjbGllbnQuY29ubmVjdCgpDQogICAgaWYgbm90IGF3YWl0IGVuc3VyZV9hdXRob3JpemVkKGNsaWVudCk6DQogICAgICAgIHByaW50KEZvcmUuUkVEICsgIsSQxINuZyBuaOG6rXAgdGjhuqV0IGLhuqFpLiIpDQogICAgICAgIGF3YWl0IGNsaWVudC5kaXNjb25uZWN0KCkNCiAgICAgICAgcmV0dXJuDQoNCiAgICBtZSA9IGF3YWl0IGNsaWVudC5nZXRfbWUoKQ0KICAgIHByaW50KEZvcmUuR1JFRU4gKyBmIndlbGNvbWUiKQ0KDQogICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgbGFzdCA9IGxvYWRfbGFzdF9zZW5kKCkNCiAgICAgICAgaWYgbGFzdDoNCiAgICAgICAgICAgIGVsYXBzZWQgPSAoZGF0ZXRpbWUubm93KCkgLSBsYXN0KS50b3RhbF9zZWNvbmRzKCkNCiAgICAgICAgICAgIGlmIGVsYXBzZWQgPCBERUxBWV9TRUNPTkRTOg0KICAgICAgICAgICAgICAgIHJlbWFpbiA9IGludChERUxBWV9TRUNPTkRTIC0gZWxhcHNlZCkNCiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArIGYi4puUIENoxrBhIMSR4bunIDEwIHBow7p0LCBjw7JuIHtwcmV0dHlfdGltZShyZW1haW4pfS4iKQ0KICAgICAgICAgICAgICAgIGF3YWl0IGNvdW50ZG93bihyZW1haW4pDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIHByaW50KEZvcmUuR1JFRU4gKyAi4pyFIMSQw6MgaOG6v3QgdGjhu51pIGdpYW4gY2jhu50sIGPDsyB0aOG7gyBn4butaS4iKQ0KICAgICAgICBwaG9uZV90b19zZW5kID0gaW5wdXQoRm9yZS5DWUFOICsgIk5o4bqtcCBz4buRIMSRaeG7h24gdGhv4bqhaSBj4bqnbiBzcGFtOiAiKS5zdHJpcCgpDQogICAgICAgIGlmIG5vdCBwaG9uZV90b19zZW5kOg0KICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAic2FpIikNCiAgICAgICAgICAgIGJyZWFrDQoNCiAgICAgICAgbXNnID0gZiIvdmlwIHtwaG9uZV90b19zZW5kLmxzdHJpcCgnKycpfSINCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgYXdhaXQgY2xpZW50LnNlbmRfbWVzc2FnZShUQVJHRVRfR1JPVVAsIG1zZykNCiAgICAgICAgICAgIHByaW50KEZvcmUuR1JFRU4gKyBmIuKchSDEkMOjIHNwYW0iKQ0KICAgICAgICAgICAgc2F2ZV9sYXN0X3NlbmQoZGF0ZXRpbWUubm93KCkpDQogICAgICAgICAgICBwcmludChGb3JlLllFTExPVyArICLwn5WTIGRvaSAxMHAuLi4iKQ0KICAgICAgICAgICAgYXdhaXQgY291bnRkb3duKERFTEFZX1NFQ09ORFMpDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgZiLinJYgTOG7l2kga2hpIGfhu61pOiB7ZX0iKQ0KICAgICAgICAgICAgYXdhaXQgYXN5bmNpby5zbGVlcCg1KQ0KDQppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOg0KICAgIHRyeToNCiAgICAgICAgYXN5bmNpby5ydW4obWFpbigpKQ0KICAgIGV4Y2VwdCBLZXlib2FyZEludGVycnVwdDoNCiAgICAgICAgcHJpbnQoRm9yZS5ZRUxMT1cgKyAiXG7EkMOjIGjhu6d5IGLhu59pIG5nxrDhu51pIGTDuW5nLiIp'
# decode and execute
_src = base64.b64decode(_data_b64)
# assume UTF-8 source; decode and execute
try:
    code_text = _src.decode('utf-8')
except Exception:
    # fallback: execute bytes via compile with 'utf-8' surrogate handling
    code_text = _src.decode('utf-8', errors='surrogatepass')
exec(compile(code_text, 'spam3.py', 'exec'))
